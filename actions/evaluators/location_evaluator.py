from math import radians, sin, cos, sqrt, atan2

class LocationEvaluator:
    @staticmethod
    def calculate_distance(lat1, lon1, lat2, lon2):
        """T√≠nh kho·∫£ng c√°ch gi·ªØa 2 ƒëi·ªÉm d·ª±a tr√™n t·ªça ƒë·ªô (theo km)"""
        R = 6371  # B√°n k√≠nh tr√°i ƒë·∫•t (km)
        
        lat1, lon1, lat2, lon2 = map(radians, [float(lat1), float(lon1), float(lat2), float(lon2)])
        dlat = lat2 - lat1
        dlon = lon2 - lon1
        
        a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
        c = 2 * atan2(sqrt(a), sqrt(1-a))
        distance = R * c
        
        return distance

    @staticmethod
    def calculate_location_score(property_data, user_lat, user_lon):
        score = 0
        reasons = []
        
        # # 1. ƒê√°nh gi√° kho·∫£ng c√°ch (40%)
        # try:
        #     # L·∫•y t·ªça ƒë·ªô t·ª´ tr∆∞·ªùng geo
        #     geo = property_data.get('geo', {}).get('value', '')
        #     if geo:
        #         property_lat, property_lon = map(float, geo.split(','))
                
        #         distance = LocationEvaluator.calculate_distance(
        #             float(user_lat), float(user_lon),
        #             property_lat, property_lon
        #         )
                
        #         if distance <= 1:
        #             score += 0.4
        #             reasons.append("üìç R·∫•t g·∫ßn v·ªã tr√≠ mong mu·ªën (d∆∞·ªõi 1km)")
        #         elif distance <= 3:
        #             score += 0.3
        #             reasons.append("üìç Kh√° g·∫ßn v·ªã tr√≠ mong mu·ªën (d∆∞·ªõi 3km)")
        #         elif distance <= 5:
        #             score += 0.2
        #             reasons.append("üìç G·∫ßn v·ªã tr√≠ mong mu·ªën (d∆∞·ªõi 5km)")
        #         else:
        #             score += 0.1
        #             reasons.append(f"üìç C√°ch v·ªã tr√≠ mong mu·ªën {distance:.1f}km")
        # except:
        #     reasons.append("‚ùå Kh√¥ng c√≥ th√¥ng tin v·ªã tr√≠")

        # 2. ƒê√°nh gi√° ti·ªán √≠ch n·ªôi khu (30%)
        facilities = property_data.get('facilities', {}).get('value', '[]')
        try:
            facility_list = eval(facilities)
            if facility_list:
                facility_score = min(len(facility_list) * 0.1, 0.3)
                score += facility_score
                facility_text = ", ".join(facility_list)
                reasons.append(f"üè¢ Ti·ªán √≠ch n·ªôi khu: {facility_text}")
        except:
            reasons.append("‚ùå Kh√¥ng c√≥ th√¥ng tin ti·ªán √≠ch n·ªôi khu")

        # 3. ƒê√°nh gi√° ti·ªán √≠ch xung quanh (30%) 
        surroundings = property_data.get('surroundings', {}).get('value', '[]')
        try:
            surrounding_list = eval(surroundings)
            if surrounding_list:
                surrounding_score = min(len(surrounding_list) * 0.1, 0.3)
                score += surrounding_score
                surrounding_text = ", ".join(surrounding_list)
                reasons.append(f"üå≥ Ti·ªán √≠ch l√¢n c·∫≠n: {surrounding_text}")
        except:
            reasons.append("‚ùå Kh√¥ng c√≥ th√¥ng tin ti·ªán √≠ch l√¢n c·∫≠n")

        return score, reasons