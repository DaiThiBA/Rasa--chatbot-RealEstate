import logging

logger = logging.getLogger(__name__)

class FinancialEvaluator:
    def __init__(self, min_price_per_m2=None, max_price_per_m2=None):
        self.min_price_per_m2 = min_price_per_m2
        self.max_price_per_m2 = max_price_per_m2

    def calculate_financial_score(self, property_data):
        """T√≠nh ƒëi·ªÉm cho ch√≠nh s√°ch t√†i ch√≠nh"""
        logger.info(f"Calculating financial score for property: {property_data}")
        logger.info(f"Price range: {self.min_price_per_m2} - {self.max_price_per_m2}")
        score = 0
        reasons = []
        
        # ƒê√°nh gi√° gi√°/m2 (30%) d·ª±a tr√™n kho·∫£ng gi√° c·ªßa ng∆∞·ªùi d√πng
        price_per_m2 = property_data.get('price_million_per_m2', {}).get('value')
        if price_per_m2 and self.min_price_per_m2 and self.max_price_per_m2:
            price_per_m2 = float(price_per_m2)
            if self.min_price_per_m2 <= price_per_m2 <= self.max_price_per_m2:
                score += 0.3
                reasons.append("üí∞ Gi√°/m2 n·∫±m trong kho·∫£ng b·∫°n mong mu·ªën")
            elif price_per_m2 < self.min_price_per_m2:
                score += 0.25
                reasons.append("üí∞ Gi√°/m2 th·∫•p h∆°n d·ª± ki·∫øn, c√≥ th·ªÉ ti·∫øt ki·ªám chi ph√≠")
            else:
                # Gi√° cao h∆°n kho·∫£ng ch·∫•p nh·∫≠n ƒë∆∞·ª£c
                diff = price_per_m2 - self.max_price_per_m2
                if diff <= 10:
                    score += 0.15
                    reasons.append("üí∞ Gi√°/m2 cao h∆°n m·ªôt ch√∫t so v·ªõi mong mu·ªën")
                else:
                    score += 0.1
                    reasons.append("üí∞ Gi√°/m2 kh√° cao so v·ªõi kho·∫£ng b·∫°n mong mu·ªën")

        # ƒê√°nh gi√° h·ªó tr·ª£ t√†i ch√≠nh (15%)
        if property_data.get('support', {}).get('value') == 'true':
            score += 0.15
            reasons.append("üí∞ C√≥ h·ªó tr·ª£ vay v·ªën ng√¢n h√†ng")
        else:
            reasons.append("‚ùå Kh√¥ng c√≥ h·ªó tr·ª£ vay v·ªën")
        
        # ƒê√°nh gi√° ph∆∞∆°ng th·ª©c thanh to√°n (15%)
        if property_data.get('payment_method', {}).get('value') == 'true':
            score += 0.15
            details = property_data.get('policy_details', {}).get('value', '')
            reasons.append(f"üí≥ Linh ho·∫°t ph∆∞∆°ng th·ª©c thanh to√°n: {details}")
        else:
            reasons.append("‚ùå Kh√¥ng c√≥ ph∆∞∆°ng th·ª©c thanh to√°n linh ho·∫°t")
        
        # ƒê√°nh gi√° ∆∞u ƒë√£i l√£i su·∫•t (20%)
        if property_data.get('interest', {}).get('value') == 'true':
            score += 0.20
            reasons.append("üìä C√≥ ∆∞u ƒë√£i l√£i su·∫•t")
        else:
            reasons.append("‚ùå Kh√¥ng c√≥ ∆∞u ƒë√£i l√£i su·∫•t")
        
        # ƒê√°nh gi√° chi·∫øt kh·∫•u (15%)
        if property_data.get('discount', {}).get('value') == 'true':
            score += 0.15
            reasons.append("üè∑Ô∏è C√≥ ch√≠nh s√°ch chi·∫øt kh·∫•u")
        else:
            reasons.append("‚ùå Kh√¥ng c√≥ ch√≠nh s√°ch chi·∫øt kh·∫•u")
        
        # ƒê√°nh gi√° cam k·∫øt l·ª£i nhu·∫≠n (20%)
        if property_data.get('profit_commitment', {}).get('value') == 'true':
            score += 0.20
            reasons.append("üìà C√≥ cam k·∫øt l·ª£i nhu·∫≠n")
        else:
            reasons.append("‚ùå Kh√¥ng c√≥ cam k·∫øt l·ª£i nhu·∫≠n")
        
        # ƒê√°nh gi√° qu√† t·∫∑ng v√† ∆∞u ƒë√£i kh√°c (15%)
        if property_data.get('gifts', {}).get('value') == 'true':
            score += 0.15
            reasons.append("üéÅ C√≥ qu√† t·∫∑ng k√®m theo")
        else:
            reasons.append("‚ùå Kh√¥ng c√≥ qu√† t·∫∑ng k√®m theo")
        
        # Th√™m chi ti·∫øt ch√≠nh s√°ch n·∫øu c√≥
        policy_details = property_data.get('policy_details', {}).get('value')
        if policy_details:
            reasons.append(f"üìù Chi ti·∫øt ch√≠nh s√°ch: {policy_details}")
        
        return score, reasons

    # def __init__(self, min_price_per_m2, max_price_per_m2):
    #     self.min_price_per_m2 = min_price_per_m2  
    #     self.max_price_per_m2 = max_price_per_m2

    # def evaluate(self, house):
    #     price_per_m2 = house.get('price_million_per_m2')
    #     score = 0
    #     reason = ""

        # # ƒê√°nh gi√° d·ª±a tr√™n kho·∫£ng gi√° ph√π h·ª£p v·ªõi ng∆∞·ªùi d√πng
        # if self.min_price_per_m2 <= price_per_m2 <= self.max_price_per_m2:
        #     score += 0.30
        #     reason = "Gi√°/m2 c√≥ th·ªÉ ph√π h·ª£p v·ªõi kh·∫£ nƒÉng t√†i ch√≠nh"
        # elif price_per_m2 < self.min_price_per_m2:
        #     score += 0.15  # V·∫´n c·ªông ƒëi·ªÉm v√¨ r·∫ª h∆°n d·ª± ki·∫øn
        #     reason = "Gi√°/m2 c√≥ th·ªÉ th·∫•p h∆°n d·ª± ki·∫øn, ti·∫øt ki·ªám chi ph√≠"
        # else:
        #     # Gi√° cao h∆°n kho·∫£ng ch·∫•p nh·∫≠n ƒë∆∞·ª£c
        #     #score += max(0, 10 - (price_per_m2 - self.max_price_per_m2)/2)
        #     reason = "Gi√°/m2 c√≥ th·ªÉ cao h∆°n kho·∫£ng mong mu·ªën"

        # return {
        #     'score': score,
        #     'reason': reason
        # }